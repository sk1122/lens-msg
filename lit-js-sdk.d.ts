/** Declaration file generated by dts-gen */

export class LitNodeClient {
    constructor(e: any);

    connect(): any;

    getChainDataSigningShare(e: any): any;

    getDecryptionShare(e: any): any;

    getEncryptionKey(e: any): any;

    getSignedChainDataToken(e: any): any;

    getSignedToken(e: any): any;

    getSigningShare(e: any): any;

    handleNodePromises(e: any): any;

    handshakeWithSgx(e: any): any;

    saveEncryptionKey(e: any): any;

    saveSigningCondition(e: any): any;

    sendCommandToNode(e: any): any;

    storeEncryptionConditionWithNode(e: any): any;

    storeSigningConditionWithNode(e: any): any;

    throwNodeError(e: any): void;

}

export const ALL_LIT_CHAINS: {
    arbitrum: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    avalanche: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    bsc: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    celo: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    cosmos: {
        blockExplorerUrls: string[];
        chainId: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        vmType: string;
    };
    cronos: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    ethereum: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    fantom: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    fuji: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    goerli: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    harmony: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    kovan: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    kyve: {
        blockExplorerUrls: string[];
        chainId: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        vmType: string;
    };
    mumbai: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    optimism: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    polygon: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    rinkeby: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    ropsten: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    solana: {
        blockExplorerUrls: string[];
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        vmType: string;
    };
    solanaDevnet: {
        blockExplorerUrls: string[];
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        vmType: string;
    };
    solanaTestnet: {
        blockExplorerUrls: string[];
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        vmType: string;
    };
    xdai: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
};

export const LIT_CHAINS: {
    arbitrum: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    avalanche: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    bsc: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    celo: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    cronos: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    ethereum: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    fantom: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    fuji: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    goerli: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    harmony: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    kovan: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    mumbai: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    optimism: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    polygon: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    rinkeby: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    ropsten: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
    xdai: {
        blockExplorerUrls: string[];
        chainId: number;
        contractAddress: string;
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        type: string;
        vmType: string;
    };
};

export const LIT_SVM_CHAINS: {
    solana: {
        blockExplorerUrls: string[];
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        vmType: string;
    };
    solanaDevnet: {
        blockExplorerUrls: string[];
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        vmType: string;
    };
    solanaTestnet: {
        blockExplorerUrls: string[];
        decimals: number;
        name: string;
        rpcUrls: string[];
        symbol: string;
        vmType: string;
    };
};

export const version: string;

export function canonicalAccessControlConditionFormatter(e: any): any;

export function canonicalEVMContractConditionFormatter(e: any): any;

export function canonicalUnifiedAccessControlConditionFormatter(e: any): any;

export function checkAndSignAuthMessage(e: any): any;

export function connectWeb3(e: any): any;

export function createHtmlLIT(e: any): any;

export function decimalPlaces(e: any): any;

export function decodeCallResult(e: any): any;

export function decryptFile(e: any): any;

export function decryptString(e: any, n: any): any;

export function decryptWithPrivKey(e: any, t: any): any;

export function decryptWithSymmetricKey(e: any, t: any): any;

export function decryptZip(e: any, t: any): any;

export function decryptZipFileWithMetadata(e: any): any;

export function disconnectWeb3(): any;

export function downloadFile(e: any): void;

export function encodeCallData(e: any): any;

export function encryptFile(e: any): any;

export function encryptFileAndZipWithMetadata(e: any): any;

export function encryptString(e: any): any;

export function encryptWithPubKey(e: any, t: any, n: any): any;

export function encryptWithSymmetricKey(e: any, t: any): any;

export function encryptZip(e: any): any;

export function fileToDataUrl(e: any): any;

export function findLITs(): any;

export function getTokenList(): any;

export function hashAccessControlConditions(e: any): any;

export function hashEVMContractConditions(e: any): any;

export function hashUnifiedAccessControlConditions(e: any): any;

export function humanizeAccessControlConditions(e: any): any;

export function injectViewerIFrame(e: any): void;

export function litJsSdkLoadedInALIT(): any;

export function lookupNameServiceAddress(e: any): any;

export function mintLIT(e: any): any;

export function printError(e: any): void;

export function sendLIT(e: any): any;

export function signAndSaveAuthMessage(e: any): any;

export function signMessageAsync(e: any, t: any, n: any): any;

export function toggleLock(): any;

export function uint8arrayFromString(string: any, encoding: any): any;

export function uint8arrayToString(array: any, encoding: any): any;

export function unlockLitWithKey(e: any): any;

export function verifyJwt(e: any): any;

export function zipAndEncryptFiles(e: any): any;

export function zipAndEncryptString(e: any): any;

export namespace wasmBlsSdkHelpers {
    function combine_decryption_shares(e: any, t: any, n: any): any;

    function combine_signatures(e: any, t: any): any;

    function create_decryption_share(e: any, t: any, n: any, r: any): any;

    function decrypt(e: any, t: any): any;

    function encrypt(e: any, t: any): any;

    function generate_poly(e: any): any;

    function get_mc_bytes(e: any): any;

    function get_mpk_bytes(): any;

    function get_msk_bytes(): any;

    function get_pkshare(): any;

    function get_skshare(): any;

    function set_mc_bytes(e: any): void;

    function set_rng_values(): any;

    function sign_msg(e: any, t: any): any;

    function sk_bytes_to_pk_bytes(e: any): any;

    function verify(e: any, t: any, n: any): any;

}

